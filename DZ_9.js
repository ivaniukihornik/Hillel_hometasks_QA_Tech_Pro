/*Створіть свій власний репозиторій.
В ньому створіть гілку js_homework1. Кожна наступна домашня робота буде здійснюватись в окремій гілці.
Вам необхідно вказати, яким буде результат операції та описати крок за кроком у вигляді коментарів, як відбувається перетворення в кожному прикладі:*/

'number' + 3 + 3; /* Result: 'number33'. При додаванні строки до числа відбувається неявне перетворення числового типу даних 
до строкового, потім відбувається конкатенація*/

null + 3; // Result: 3. Тип даних null означає пусте значення і при додаванні до числа не впливає на результат

5 && "qwerty"; /* Result: "qwerty". При виконанні логічного оператора && обидві умови перевіряються, чи вони true. Якщо обидві - true, 
результатом операції буде умова, яка перевірялась останньою, тобто умова справа */

+'40' + +'2' + "hillel"; /* Result: 42hillel.
1 дія: +'40' - так як попереду плюса нічого не стоїть, він виступає у ролі унарного оператора і перетворює '40' у число
2 дія: +'2' - за аналогією
3 дія: 40 + 2 = 42
4 дія: перетворення числа 42 до строки і конкатенація
*/

'10' - 5 === 6; /* Result: false.
При відніманні між строкою і числом javascript намагається перетворити строку до числа, тому результатом віднімання буде 5.
Оператор порівняння === перевіряє рівність двох умов і повертає false, тому що 
*/

true + false /* Result: 1. При додаванні булевих значень javascript намагається знайти математичний контекст, тому перетворює 
true на 1, а false - на 0.
*/

'4px' - 3 /* Result: Nan. При відніманні між строкою і числом javascript намагається перетворити строку до числа,
а так як 4px не можна перетворити, то повертається значення Nan. А будь які операції з Nan повертають Nan
*/

'4' - 3 /* Result: 1. При відніманні між строкою і числом javascript намагається перетворити строку до числа, 
тому результатом віднімання буде 1.
*/

'6' + 3 ** 0; /* Result: '61'.
1 дія: 3 ** 0 = 1 (дев'ять в степені 0)
2 дія: конкатенація строки з числом
*/

12 / '6' /* Result: 2. При діленні між строкою і числом javascript намагається перетворити строку до числа
*/

'10' + (5 === 6); /* Result: '10false'.
1 дія: 5 === 6. Результат порівнянна - булеве false
2 дія: перетворення false до строки та конкатенація
*/

null == '' /* Result: false. При порівнянні різних типів даних javascript намагається перетворити їх до якогось спільного. 
Але при == це окремий випадок, і значення не перетворюються. 
*/

3 ** (9 / 3); /* Result: 27.
1 дія: 9 / 3 = 3 (дужки мають вищий пріоритет)
2 дія: 3 ** 3 = 27. (3 в степені 3)
*/

!!'false' == !!'true' /* Result: true. Оператор !! перетворює значення в відповідний булевий еквівалент, тобто true для непустої строки
*/

0 || '0' && 1 /* Result: 1.
1 дія: '0' && 1, тому що операнд && має вищий пріоритет. Результат '1', тому що обидва значення true і береться друге.
2 дія: 0 || 1 - береться перший з операндів, який відповідає true
*/

(+null == false) < 1; /* Result: false.
1 дія: +null. Результат - 0. Унарний оператор + перетворює null до числа.
2 дія: 0 == false. Результат true. Тому що число 0 відповідає булевому false.
3 дія: true < 1. Результат - false. Тому що булевому true відповідає 1
*/

false && true || true /* Result: true.
1 дія: false && true (Пріоритет && над ||). Результат - false. Тому що при логічному "і" якщо одна з умов false - і результат false
2 дія: false || true - береться перше значення, яке true
*/

false && (false || true); /* Result: false
1 дія: false || true (пріоритет дужок). Результат true - береться перше значення, яке true
2 дія: false && true. Якщо одна з умов false - і результат false
*/

(+null == false) < 1 ** 5; /* Result: false
Аналогічно виразу (+null == false) < 1.  (бо 1 ** 5 = 1)
*/